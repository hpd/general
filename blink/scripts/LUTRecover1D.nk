#! /Applications/The Foundry/Nuke9.0v4/Nuke9.0v4.app/Contents/MacOS//libnuke-9.0.4.dylib -nx
version 9.0 v4
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="3" y="23" w="1440" h="873" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="777" stretch="1"/>
            <splitter orientation="2">
                <split size="497"/>
                <dock id="" activePageId="Viewer.1" focus="true">
                    <page id="Viewer.1"/>
                </dock>
                <split size="350"/>
                <dock id="" activePageId="DAG.1">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                    <page id="uk.co.thefoundry.scripteditor.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /Volumes/BOOTCAMP/work/client/hpd/code/general/hpd/general/blink/scripts/LUTRecover1D.nk
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
}
BackdropNode {
 inputs 0
 name BackdropNode11
 tile_color 0x35847eff
 label "4. LUTRecover here"
 note_font_size 42
 xpos -1881
 ypos 426
 bdwidth 566
 bdheight 213
}
BackdropNode {
 inputs 0
 name BackdropNode12
 tile_color 0x565697ff
 label "5. Write Recovered Grade LUT"
 note_font_size 42
 xpos -1883
 ypos 646
 bdwidth 568
 bdheight 148
}
BackdropNode {
 inputs 0
 name BackdropNode13
 tile_color 0x747480ff
 label "6. Compare Graded and Recovered Grade"
 note_font_size 42
 xpos -1306
 ypos 109
 bdwidth 702
 bdheight 684
}
BackdropNode {
 inputs 0
 name BackdropNode14
 tile_color 0x6e705aff
 label "1. Choose the resolution for Recovered LUT"
 note_font_size 42
 xpos -1884
 ypos -126
 bdwidth 1278
 bdheight 225
}
BackdropNode {
 inputs 0
 name BackdropNode16
 tile_color 0x8e7f8eff
 label "Just an example"
 note_font_size 42
 xpos -1817
 ypos 185
 bdwidth 398
 bdheight 141
}
BackdropNode {
 inputs 0
 name BackdropNode5
 tile_color 0x8e7f8eff
 label LUTApply
 note_font_size 42
 xpos -1235
 ypos 481
 bdwidth 398
 bdheight 141
}
BackdropNode {
 inputs 0
 name BackdropNode8
 tile_color 0x8e388e00
 label "2. Put Raw and Graded \nimages here"
 note_font_size 42
 xpos -1882
 ypos 112
 bdwidth 569
 bdheight 303
}
BackdropNode {
 inputs 0
 name BackdropNode9
 tile_color 0xa4a4a4ff
 label "LUT Recovery example"
 note_font_size 42
 xpos -2375
 ypos -284
 bdwidth 2040
 bdheight 142
}
Constant {
 inputs 0
 channels rgb
 format "1024 1 0 0 1024 1 1 1D LUT 1024"
 name Constant1
 xpos -1355
 ypos -41
}
Expression {
 expr0 x/(width-1)
 expr1 x/(width-1)
 expr2 x/(width-1)
 name Expression1
 xpos -1355
 ypos 31
}
Dot {
 name Dot10
 xpos -1321
 ypos 70
}
Dot {
 name Dot11
 xpos -1629
 ypos 70
}
set N8da0e000 [stack 0]
Reformat {
 format "512 512 0 0 512 512 1 square_512"
 name Reformat5
 xpos -2197
 ypos 63
}
Write {
 file /Volumes/BOOTCAMP/work/client/hpd/code/public/general/blink/scripts/LUTRecover_identity.jpg
 raw true
 file_type jpeg
 _jpeg_quality 1
 _jpeg_sub_sampling 4:4:4
 checkHashOnRead false
 version 2
 name Write4
 xpos -2197
 ypos 95
}
ColorWheel {
 inputs 0
 format "256 256 0 0 256 256 1 square_256"
 gamma 0.45
 name ColorWheel1
 xpos -1791
 ypos 224
}
set N9237c690 [stack 0]
Dot {
 name Dot13
 label Raw
 note_font_size 36
 xpos -1757
 ypos 321
}
set N227f8c30 [stack 0]
Reformat {
 format "512 512 0 0 512 512 1 square_512"
 name Reformat1
 xpos -2208
 ypos 314
}
Write {
 file /Volumes/BOOTCAMP/work/client/hpd/code/public/general/blink/scripts/LUTRecover_rawImage.jpg
 raw true
 file_type jpeg
 _jpeg_quality 1
 _jpeg_sub_sampling 4:4:4
 checkHashOnRead false
 version 3
 name Write1
 xpos -2208
 ypos 346
}
Read {
 inputs 0
 file /Volumes/BOOTCAMP/work/client/hpd/code/general/hpd/general/blink/scripts/FilmicTonemappingLut.tga
 format "256 2 0 0 256 2 1 "
 origset true
 raw true
 name Read1
 xpos -1526
 ypos 166
}
push $N9237c690
BlinkScript {
 inputs 2
 kernelSourceFile /Volumes/BOOTCAMP/work/client/hpd/code/general/hpd/general/blink/LUTApply1D.blink
 KernelDescription "1 \"LUTApply1DKernel\" iterate pixelWise b437e7bd391f8c0f88c36520648ebe13f8fa796a04ce443a77eca1e47cc2a7c1 3 \"src\" Read Random \"lut1dImage\" Read Random \"dst\" Write Point 1 \"interpolation\" Int 1 AQAAAA=="
 kernelSource "//\n// Copyright (c) 2014-2015 Haarm-Pieter Duiker <hpd1@duikerresearch.com>\n//\n\n//\n// A kernel that will apply 1d LUT to an image. The 1d LUT is represented as a linear ramp image\n//\n\n// Utility\nfloat4 mix(float4 a, float4 b, float4 f) \{\n  float4 mixed;\n  mixed.x = a.x*(1.f - f.x) + b.x*f.x;\n  mixed.y = a.y*(1.f - f.y) + b.y*f.y;\n  mixed.z = a.z*(1.f - f.z) + b.z*f.z;\n  mixed.w = a.w*(1.f - f.w) + b.w*f.w;\n  return mixed;  \n\}\n\n//\n// kernel\n//\nkernel LUTApply1DKernel : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src;\n  Image<eRead, eAccessRandom, eEdgeClamped> lut1dImage;\n  Image<eWrite> dst;\n\n  param:\n    int interpolation;\n\n  local:\n    int lutResolution;\n\n  void define() \{\n    defineParam(interpolation, \"interpolation\", 1);\n  \}\n\n  void init() \{\n    float pixels = lut1dImage.bounds.width();\n    lutResolution = int(pixels);\n  \}\n\n  void process(int2 pos) \{\n    SampleType(lut1dImage) lut1dImageSample;\n\n    // Sample the src image\n    SampleType(src) srcSample;\n    srcSample = src(pos.x, pos.y);\n\n    lut1dImageSample.x = 0.f;\n    lut1dImageSample.y = 0.f;\n    lut1dImageSample.z = 0.f;\n\n    // Use the 1D LUT to find the new value\n\n    // Nearest point\n    if( interpolation == 0 ) \{\n      int3 srcLUTPosition;\n      srcLUTPosition.x = round(clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition.y = round(clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition.z = round(clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1));\n\n      lut1dImageSample = lut1dImage(srcLUTPosition.x, 0);\n      float r = lut1dImageSample.x;\n      lut1dImageSample = lut1dImage(srcLUTPosition.y, 0);\n      float g = lut1dImageSample.y;\n      lut1dImageSample = lut1dImage(srcLUTPosition.z, 0);\n      float b = lut1dImageSample.z;\n\n      lut1dImageSample.x = r;\n      lut1dImageSample.y = g;\n      lut1dImageSample.z = b;\n    \} // nearest\n\n    // Bi-linear interpolation \n    else if( interpolation == 1 ) \{\n      int3 srcLUTPosition\[2];\n      srcLUTPosition\[0].x = floor(clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[0].y = floor(clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[0].z = floor(clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1));\n\n      srcLUTPosition\[1].x = ceil(clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[1].y = ceil(clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[1].z = ceil(clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1));\n\n      float4 interp;\n      interp.x = (clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1)) - srcLUTPosition\[0].x;\n      interp.y = (clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1)) - srcLUTPosition\[0].y;\n      interp.z = (clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1)) - srcLUTPosition\[0].z;\n      interp.w = 1.0;\n\n      // Two samples from LUT\n      float4 lower, higher;;\n\n      // sample r, g, b for lower position\n      lut1dImageSample = lut1dImage(srcLUTPosition\[0].x, 0);\n      lower.x = lut1dImageSample.x;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[0].y, 0);\n      lower.y = lut1dImageSample.y;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[0].z, 0);\n      lower.z = lut1dImageSample.z;\n      lower.w = 1.0;\n\n      // sample r, g, b for higher position\n      lut1dImageSample = lut1dImage(srcLUTPosition\[1].x, 0);\n      higher.x = lut1dImageSample.x;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[1].y, 0);\n      higher.y = lut1dImageSample.y;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[1].z, 0);\n      higher.z = lut1dImageSample.z;\n      higher.w = 1.0;\n\n      // Interpolate the samples\n      lut1dImageSample = mix(lower, higher, interp);\n    \} // bi-linear\n\n    // Write the new value to dst\n    SampleType(dst) t;\n    t.x = lut1dImageSample.x;\n    t.y = lut1dImageSample.y;\n    t.z = lut1dImageSample.z;\n\n    dst() = t;\n  \}\n\};\n"
 rebuild ""
 maxTileLines 100
 name BlinkScript1
 xpos -1526
 ypos 265
}
Dot {
 name Dot14
 label Graded
 note_font_size 36
 xpos -1492
 ypos 318
}
set N227f21a0 [stack 0]
Reformat {
 format "512 512 0 0 512 512 1 square_512"
 name Reformat2
 xpos -2207
 ypos 429
}
Write {
 file /Volumes/BOOTCAMP/work/client/hpd/code/public/general/blink/scripts/LUTRecover_gradedImage.jpg
 raw true
 file_type jpeg
 _jpeg_quality 1
 _jpeg_sub_sampling 4:4:4
 checkHashOnRead false
 version 3
 name Write2
 xpos -2207
 ypos 461
}
push $N227f21a0
Dot {
 name Dot2
 xpos -1492
 ypos 495
}
set N8da031b0 [stack 0]
push $N227f8c30
Dot {
 name Dot3
 xpos -1757
 ypos 497
}
push $N8da0e000
Dot {
 name Dot15
 xpos -1629
 ypos 504
}
BlinkScript {
 inputs 3
 kernelSourceFile /Volumes/BOOTCAMP/work/client/hpd/code/general/hpd/general/blink/LUTRecover1D.blink
 KernelDescription "1 \"LUTRecover1DKernel\" iterate pixelWise f0e99a4e6ced44cbcd11a6dc13565f1e8f88965c48198af948285e33ad058090 4 \"lut1DPattern\" Read Random \"before\" Read Random \"after\" Read Random \"dst\" Write Point 2 \"cutoff\" Float 1 AAAAPw== \"falloff\" Float 1 AACgQA=="
 kernelSource "//\n// Copyright (c) 2014-2015 Haarm-Pieter Duiker <hpd1@duikerresearch.com>\n//\n\n//\n// A kernel that will recover a 1d LUT by comparing two images\n//\n\n//\n// A distance-based weighting function\n//\nfloat falloffFilter(float d, float f) \{\n  return exp(-d * f);\n\}\n\n//\n// Map from the 2D position in the CMSTestPattern image to a 1D LUT position\n//\nint nukePosition2dToPosition1d(int2 pos, int width, int lutResolution) \{\n    int4 position;\n\n    float indexNormalized = float(pos.x)/(width-1);\n\n    return indexNormalized*lutResolution;\n\}\n\n//\n// kernel\n//\nkernel LUTRecover1DKernel : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> lut1DPattern;\n  Image<eRead, eAccessRandom, eEdgeClamped> before;\n  Image<eRead, eAccessRandom, eEdgeClamped> after;\n  Image<eWrite> dst;\n\n  param:\n    float cutoff;\n    float falloff;\n\n  local:\n    int lutResolution;\n\n  void define() \{\n    defineParam(cutoff, \"cutoff\", 0.5f);\n    defineParam(falloff, \"falloff\", 5.f);\n  \}\n\n  void init() \{\n    lutResolution = int(lut1DPattern.bounds.width());\n  \}\n\n  void process(int2 pos) \{\n    float3 value;\n    float highDistance;\n\n    //\n    // Information for the input pixel position\n    //\n    int lut1DPosition;\n    lut1DPosition = nukePosition2dToPosition1d(pos, \n      lut1DPattern.bounds.width(), lutResolution);\n\n    float lut1DSample;\n    lut1DSample = float(lut1DPosition) / (lutResolution-1.f);\n\n    //\n    // Brute force scattered data interpolation\n    // Each pixel in the input lut1DPattern corresponds to a LUT entry\n    // For each pixel in the input lut1DPattern\n    // - Step through each pixel location in the before and after images\n    // --- For each channel, since we're computing a 1D LUT\n    // ------ Compute a weight based on the before pixel color's proximity to the cms pixel\n    // ------ Multiply the after pixel's color by the weight\n    // ------ Add the weight and the weighted after pixel's color to running sum\n    // ---- Divide by the sum of the weights \n    //\n    float weightedValueSum;\n    float weightSum;\n\n    float weight, distance;\n\n    int2 highPosition;\n    float highSample, highValue;\n\n    SampleType(before) beforePixel;\n    float beforeSample;\n    SampleType(after) afterPixel;\n    float afterSample;\n\n    // Step through each channel\n    for(int c = 0; c<3; c += 1) \{\n      weightedValueSum = float(0.f);\n      weightSum = 0.f;\n      highDistance = 1000.f;\n\n      // Step through each of the before and after input pixels\n      for(int inX = 0; inX<before.bounds.width(); inX += 1) \{\n        for(int inY = 0; inY<before.bounds.height(); inY += 1) \{\n\n          // Get sample values\n          beforePixel = before(inX, inY);\n          beforeSample = beforePixel\[c];\n          afterPixel = after(inX, inY);\n          afterSample = afterPixel\[c];\n\n          // Skip pixels with a 0 alpha\n          if( beforePixel\[3] == 0.0 )\n            continue;\n\n          // Compute weight for this sample\n          // How close is the 'before' value to the current lut1DPattern value\n          distance = fabs(beforeSample - lut1DSample);\n          if( distance < cutoff )\n            weight = falloffFilter(distance*lutResolution, falloff);\n          else\n            weight = 0.f;\n\n          // Keep track of the closest sample, just in case\n          if( distance < highDistance ) \{\n            highDistance = distance;\n            highValue = afterSample;\n            highPosition = int2(inX, inY);\n          \}\n\n          // Add into interpolation sum\n          weightedValueSum += weight * afterSample;\n          weightSum += weight;\n        \}\n      \}\n\n      // Divide out weighting\n      if( weightSum > 0.f ) \{\n        value\[c] = weightedValueSum / weightSum;\n        highDistance = weightSum;\n\n      // Use the nearest sample if there were no weighted values\n      \} else \{\n        value\[c] = highValue;\n        highDistance = 1000.f;\n      \}\n    \}\n\n    //\n    // Diagnostics\n    // \n    /*\n    value.x = lutResolution;\n    value.y = inputPosition.w;\n\n    value.x = inputSample.x;\n    value.y = inputSample.y;\n    value.z = inputSample.z;\n    */\n\n    //\n    // Copy to output\n    //\n    SampleType(lut1DPattern) t;\n    t.x = value.x;\n    t.y = value.y;\n    t.z = value.z;\n    t.w = highDistance;\n\n    dst() = t;\n  \}\n\};\n"
 rebuild ""
 maxTileLines 1
 name BlinkScript2
 xpos -1663
 ypos 553
}
set N8da17820 [stack 0]
Reformat {
 format "1024 1 0 0 1024 1 1 1D LUT 1024"
 name Reformat4
 label "Seems to be necessary (Blink takes largest combo of input dimensions)"
 xpos -1663
 ypos 585
}
Dot {
 name Dot4
 xpos -1629
 ypos 700
}
set N8f8ba610 [stack 0]
Sampler {
 lut {red {curve 0.01176470239 x0.0009775171056 0.01176470052 x0.001955034211 0.01176471356 0.01176523883 0.01185611729 0.01272184029 0.01371528488 0.01469172724 0.01556976698 0.01568540931 0.01568627916 0.01568674296 0.01575814933 0.01662083901 0.01762139052 0.01857407205 0.01948035322 0.01960691251 x0.0175953079 0.01960784197 x0.01857282594 0.01960784383 x0.01955034211 0.01960783824 0.01960785687 x0.02150537632 0.01960783452 0.01960831136 x0.02346041054 0.01966158114 0.02050960623 x0.02541544475 0.02147614956 0.02248686925 x0.02737047896 0.02340593189 0.0235286057 x0.02932551317 0.0235294085 0.02352995053 0.02360917628 0.02436732873 0.02538645454 x0.03421309963 0.02637685277 x0.0351906158 0.02730030753 0.02744989097 x0.03714565188 0.02745096758 x0.03812316805 0.02745097503 0.02745102532 0.02745098993 0.02745098434 x0.04203323647 0.02745127119 x0.04301075265 0.02749800682 0.02833002806 x0.04496578872 0.02928756736 x0.0459433049 0.03030217253 0.03122311831 0.03222265467 0.03316788748 x0.04985337332 0.03412676603 x0.05083088949 0.0351039879 0.0352919735 x0.05278592557 0.03529414162 x0.05376344174 0.03529435024 0.03533945978 0.03609441593 0.03706269339 x0.05767351016 0.03806565702 x0.05865102634 0.03897435591 0.03921334818 x0.06060606241 0.03921568766 x0.06158357859 0.03921587765 0.03925448656 0.0400181599 0.0409922339 0.04194910079 0.04295482859 x0.06744868308 0.04393859953 0.04488335922 0.04584599659 0.04679583386 0.04705694318 0.04705881327 0.04705902562 x0.07429130375 0.04709070921 x0.07526881993 0.04780387506 0.04877289012 0.04974874854 0.0507674478 0.05176777393 0.05274581537 0.05369274691 0.05464467034 x0.08308895677 0.05565206334 x0.08406647295 0.0566248931 0.05758336931 0.0585466437 0.05882111564 0.05882350728 0.05882372707 x0.08993157744 0.05884781852 x0.09090909362 0.0595373176 0.06056696177 0.06149820611 0.06250523031 0.06342364848 0.06442777067 0.065410465 0.06636068225 x0.09872923046 0.06731333584 x0.09970674664 0.06836186349 0.06934260577 0.07027730346 0.07127955556 0.07226321101 0.07319547981 x0.1055718511 0.07418002933 x0.1065493673 0.07450693101 0.07450976968 0.0745100677 0.07455257326 0.07583086938 0.07778028399 0.07977467775 0.08166448772 x0.1143695042 0.08358645439 x0.1153470203 0.08561245352 0.08756554872 0.08945465833 0.09085784853 0.0918340832 0.09274183214 x0.1212121248 0.09378793091 x0.122189641 0.09411253035 0.09411770105 0.09411776066 0.09413637966 0.09476625174 0.095681943 0.09667790681 0.09768842161 0.09866040945 0.09961102158 0.1005374938 0.1015888005 x0.13391985 0.1031837612 x0.1348973662 0.1051707566 0.1070536301 0.1091605052 0.1103880554 0.111339651 0.1122988239 0.1133341789 0.114823401 0.1168473065 0.1187494993 0.1206546798 0.1215575114 0.1215684488 0.1215686947 x0.1485826075 0.1215884835 x0.1495601237 0.1232446432 0.1261695772 0.1290770173 0.1319668889 0.1333073825 0.1333332807 0.1333334744 0.1333416998 0.133833006 0.1348663568 0.1358112544 0.1368432343 0.138180688 0.1402839571 0.1421285421 0.1441894919 x0.1652003974 0.1455475241 x0.1661779135 0.1465588659 0.1474858522 0.1485553235 0.1499796212 0.1520492584 0.1538080126 0.1557915807 0.157388553 0.1581812948 0.1593429148 0.1602989733 0.1616187692 0.1637491286 0.1657104492 x0.1798631549 0.1675333232 x0.1808406711 0.1694429815 0.171373114 0.1734708846 0.1752895564 0.1768115312 0.1779324263 0.1789570153 0.1797988713 0.1812349409 0.1831829697 0.184994176 0.187054798 0.1891455948 0.1911584139 0.19281964 0.1948968023 x0.1964809448 0.196939677 x0.1974584609 0.198853761 0.2008762658 0.2027268261 0.2047817856 0.2065144479 0.2087685168 0.2105250657 0.2121768147 0.2131252885 0.2140999734 0.2150951028 0.2165096104 0.2182662934 0.220289886 x0.2111437023 0.2222418636 x0.2121212184 0.2241512388 0.2259644121 0.2282979488 0.2300339192 0.2319553494 0.2341026962 0.2360046059 0.2380118519 0.2398652136 0.2418061346 0.2438112795 0.245874539 0.2475416213 0.2497351021 0.2515566051 0.253683269 x0.2277614921 0.2554583251 x0.2287390083 0.2575240433 0.2594035566 0.2614783645 0.2631072998 0.2653255463 0.2673190832 0.2692149282 0.2711078227 0.2731981277 0.2751791775 0.2770933509 0.2787790895 0.2809100449 0.2828727067 x0.2424242496 0.2849107981 x0.2434017658 0.2866919041 0.2887707651 0.2906857133 0.2928577363 0.2940613031 0.2941169739 0.2941175997 0.2941201031 0.2945682704 0.2966126502 0.2985336781 0.3004887998 0.3022954464 0.3043679893 0.3063035905 0.3083577156 0.3101663291 0.3121670485 0.3141222 0.3162428141 0.3181173801 0.3198811114 0.3221519887 0.3238248527 x0.2668621838 0.3260614276 x0.2678397 0.3277365267 0.329649955 0.3319413364 0.3337406814 0.3355665505 0.3374353051 0.339733988 0.3418416679 0.3446229398 0.3474501371 0.3503499031 0.3533848822 0.3552033007 0.35705477 0.359242022 0.3610590398 0.3631125987 0.3649819791 0.3669929802 0.3687836826 0.3708461821 0.3728799522 0.3748483062 0.3766704798 0.3786670268 0.3806438446 0.3826021254 0.3845923841 0.3865400553 0.3884391785 x0.297165215 0.3904401362 x0.2981427312 0.3924497068 0.3951889277 0.3981826305 0.40148139 0.4040099978 0.4058879018 0.4081234932 0.4100016356 0.4119451344 0.4138413072 0.4158916175 0.417884022 0.4196533859 0.4218240976 0.4236245155 0.4256881177 0.4277003706 0.4295837283 0.4314416349 0.4333752394 0.4354776442 0.4383611381 0.4413681328 0.4441362023 0.4471475482 0.4489227533 0.4509984255 0.4531804323 0.4547804892 0.4570738077 0.4589577615 0.4609536529 x0.3294232786 0.4628002644 x0.3304007947 0.4645803571 0.4668132961 0.4686237872 0.4705713391 0.4726377428 0.4744395018 0.4764441252 0.4784695208 0.4813341796 0.4843568206 0.4872981906 0.4901332855 0.4941302538 0.4980415702 0.5018603206 0.5055790544 0.5078158379 0.5097562075 0.511739552 0.5135344267 0.513717711 0.5137255192 0.5137279034 0.513903141 0.5163864493 0.5195189118 0.5224428773 0.5253791213 0.5291310549 0.5330581665 x0.3597263098 0.5370190144 x0.360703826 0.5406630039 0.5430505872 0.5449333787 0.5468572378 0.5489112139 0.5507879853 0.5528326631 0.5548390746 0.5567363501 0.5593998432 0.5622220039 0.5653120875 0.5684463382 0.570479095 0.5722536445 0.5743266344 0.576022923 0.5764680505 0.5764706135 0.5764710307 0.5766022205 0.5780317187 0.5801998377 0.5820424557 0.5839613676 0.5858619809 0.5878760219 0.5900247693 0.5918066502 0.5938565731 0.5958341956 0.5975731015 x0.3919843733 0.5997030139 x0.3929618895 0.602710247 0.6056392789 0.6081946492 0.6109985113 0.6133682728 0.6151836514 0.617346406 0.6189555526 0.6210985184 0.6232327223 0.6250510812 0.6271609068 0.6305904984 0.6341574788 0.6386466622 0.6421487927 0.6446433067 0.6466830373 0.6484315991 0.6503847241 0.6524570584 0.6543981433 0.6562210917 0.6582654715 0.6603671908 0.662263453 0.6642199755 0.6662141085 0.6682050228 0.6700479388 x0.4222874045 0.6720230579 x0.4232649207 0.6739458442 0.6766709089 0.6795306802 0.682430625 0.685423553 0.6875038743 0.6896973848 0.691527009 0.6936582327 0.6953423619 0.6973076463 0.6996033788 0.7014517784 0.7032496929 0.705329895 0.7071265578 0.7090640068 0.7111795545 0.7132111788 0.7149903774 0.7169348598 0.7189205289 0.720952034 0.7226644754 0.7249486446 0.7268107533 0.7286939621 0.7307701111 0.7326955795 0.7345471978 0.7366225123 0.7384967804 x0.4545454681 0.7404620051 x0.4555229843 0.741874218 0.7428100109 0.7437907457 0.7447839379 0.7462878823 0.7480552197 0.7501600981 0.7522064447 0.7540745735 0.7561255693 0.7580519319 0.759947598 0.7619879246 0.7638520598 0.76596421 0.7678843737 0.7696697116 0.7718972564 0.773573339 0.7756632566 0.7775915861 0.7797010541 0.781486392 0.7834882736 0.7849187851 0.7858269215 0.7867984772 0.7878735662 0.7892249227 0.7913423181 x0.4848484993 0.7933382392 x0.4858260155 0.7951501012 0.7970075011 0.7991866469 0.8010936975 0.803037703 0.8051513433 0.8069431186 0.8088222742 0.8109192252 0.8122373819 0.813259542 0.814219296 0.8152509928 0.8166230917 0.8186511397 0.8204925656 0.8227630854 0.8245224953 0.8264341354 0.8284054399 0.8303722739 0.8318305016 0.8329051137 0.833805263 0.8348786235 0.8361308575 0.8381863236 0.8401253819 0.841917634 0.8436546326 0.8445657492 0.8454807401 0.8466022015 0.8480030298 0.8496592641 0.8517600298 0.8537522554 0.8553150296 0.8563348055 0.8573399186 0.8582540751 0.8595380783 0.8615638018 0.8636393547 0.8656260371 0.8671013117 0.8679430485 0.869117558 x0.5327468514 0.8700289726 x0.5337243676 0.8713231683 0.873257637 0.8753027916 0.877174437 0.8787972331 0.879776597 0.8806919456 0.8817774057 0.8827026486 0.8836778998 0.8846555948 0.8855528235 0.8866369128 0.8875576258 0.8886169195 0.8895853758 0.8907962441 0.8928920031 0.8950980902 0.896703124 0.8983390927 0.899349153 0.9002910852 0.9013339877 0.9022143483 0.9031592011 0.9042738676 0.9051800966 0.9062703252 0.9071142077 0.9081668258 0.9091303349 0.9101105928 0.9110594392 0.9121436477 0.9129445553 0.9140517712 0.9149915576 0.9158502221 0.9169071913 0.9179125428 0.9189213514 0.9197754264 0.9208620191 0.921865344 0.9228417873 0.9236767292 0.9248594642 0.9257308245 0.9266932011 0.9276714325 0.9286090732 0.9296704531 0.9306641221 0.9315936565 0.9325886965 0.9335485101 0.9346136451 0.9355634451 0.936406672 0.9374839664 0.9384570718 x0.59433043 0.93941468 x0.5953079462 0.9404236078 0.9411084652 0.9411759973 0.9411771894 0.9411787987 0.9413967133 0.9422650933 0.9433715343 0.9443625808 0.9451456666 0.9464244246 0.9472088218 0.9481829405 0.9489583373 0.9490194917 0.9490196705 0.9490199089 0.9490194321 0.9490201473 0.9490196705 0.9490218163 0.9492105246 0.9502031207 0.9511335492 0.951998055 0.9531303644 0.9540371299 0.9550756812 0.9560366869 0.9567905068 0.9568625093 0.9568622112 0.9568632245 0.9570376873 0.9578790665 0.9589993954 0.9598553777 0.9607722163 0.960784018 0.9607841969 0.960785687 0.9609929323 0.9618522525 0.9628438354 0.9637470245 0.9646626711 0.9647060633 0.9647054672 0.9647078514 0.9648306966 0.9656744599 0.9666900039 0.9677726626 0.9685180187 0.9686266184 0.9686282277 0.9686278701 0.9686278105 0.9686275125 0.9686274529 0.9686273932 0.9686275125 0.9686275125 0.9686276317 x0.657869041 0.9686281085 x0.6588465571 0.9687045813 0.9696178436 0.9705819488 0.9714603424 0.9725162387 0.972548604 0.972548902 0.9725505114 0.9726108909 0.9734823704 0.974424243 0.9755613208 0.9762858152 0.9764700532 0.9764708281 0.9764704704 0.976470232 0.9764708281 0.9764708281 0.9764723778 0.9765903354 0.9774550796 0.9783933759 0.9793559909 0.9801793098 0.9803911448 0.980392158 0.9803923965 0.9803923368 0.9803919196 0.9803923965 0.9803926945 0.9804958701 0.9812004566 0.9823329449 0.983188808 0.9842043519 0.9843125343 0.9843138456 0.9843137264 0.984313786 0.9843137264 0.9843139052 0.9843140244 0.984313786 0.9843141437 0.984313488 0.984313786 0.984313488 0.9843142629 0.9843136668 0.9843145609 0.984357357 0.9851444364 0.9861322641 0.9871049523 0.987978518 0.9882339239 0.9882355928 0.9882357717 0.9882355928 0.9882353544 x0.7194526196 0.9882355928 x0.7204301357 0.9882355928 0.9882353544 0.9882353544 0.988235414 0.9882359505 0.9882891178 0.9889620543 0.9900867343 0.9909293652 0.9919962287 0.9921551943 0.9921565652 0.9921566844 0.9921571612 0.9921566248 0.9921571016 0.992156744 0.9921569824 0.9921569824 0.99215734 0.992157042 0.9921568036 0.992156744 0.9921568632 0.9921571016 0.9921569824 0.992156744 0.9921569824 0.9921568632 0.9921568632 0.992157042 0.9921566844 0.9921566248 0.9921571612 0.99215734 0.9921565056 0.9921568036 0.992174685 0.9928650856 0.9937589765 0.9948917627 0.9957757592 0.9960757494 0.9960782528 0.9960792661 0.996078372 0.9960782528 0.99607867 0.9960780144 0.9960786104 0.99607867 0.996078372 0.9960781932 0.9960783124 0.9960784912 0.9960783124 0.996078372 0.9960784912 0.9960781932 0.9960784316 0.9960784912 0.9960786104 0.9960780144 0.9960786104 x0.7829912305 0.9960779548 x0.7839687467 0.9960787892 0.9960782528 0.99607867 0.99607867 0.9960788488 0.9960784912 0.9960786104 0.9960786104 0.9960898757 0.9967173338 0.9976292253 0.9987367988 0.999584794 0.9999970794 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.8445748091 1 x0.8455523252 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.90811342 1 x0.9090909362 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.9696969986 1 x0.9706745148 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1}
   green {curve 0.01176469959 x0.0009775171056 0.0117647117 x0.001955034211 0.01176470052 0.01176523324 0.0118547678 0.01272836328 0.01371408813 0.01469005831 0.01556810737 0.0156853646 0.01568626054 0.01568674296 0.01575607061 0.01662784256 0.01761632226 0.01855535991 0.01948383637 0.01960692555 x0.0175953079 0.01960783079 x0.01857282594 0.01960784383 x0.01955034211 0.01960784756 0.01960786432 x0.02150537632 0.01960784383 0.0196082741 x0.02346041054 0.01966633834 0.02049738914 x0.02541544475 0.0214713607 0.02247756906 x0.02737047896 0.02340433188 0.0235286057 x0.02932551317 0.02352940477 0.02352998219 0.02361197397 0.02438878454 0.02537812293 x0.03421309963 0.02636875585 x0.0351906158 0.02729672007 0.02744989283 x0.03714565188 0.02745097689 x0.03812316805 0.02745094709 0.02745100856 0.02745096944 0.02745098248 x0.04203323647 0.02745131031 x0.04301075265 0.02750399895 0.02831256576 x0.04496578872 0.0292725116 x0.0459433049 0.03031462431 0.03122763336 0.03221399337 0.03319329768 x0.04985337332 0.03412828594 x0.05083088949 0.0350917317 0.03529216349 x0.05278592557 0.03529413044 x0.05376344174 0.03529431671 0.03533400223 0.03611123189 0.03707426041 x0.05767351016 0.03807510063 x0.05865102634 0.03898273408 0.03921378031 x0.06060606241 0.03921567276 x0.06158357859 0.03921587393 0.03925701976 0.04004542902 0.04097924754 0.04194524884 0.04296720773 x0.06744868308 0.04391252622 0.04491284117 0.04584277794 0.0468255803 0.04705688357 0.04705882818 0.04705903679 x0.07429130375 0.0470806472 x0.07526881993 0.04782178998 0.04875897616 0.04978035018 0.05074209347 0.05178394169 0.05270735919 0.05369533971 0.05464008078 x0.08308895677 0.0556383878 x0.08406647295 0.05660242587 0.05757918954 0.05853745714 0.05882097036 0.05882356688 0.05882365629 x0.08993157744 0.05885137245 x0.09090909362 0.05952310935 0.06056644022 0.06147740036 0.06248687208 0.0634259358 0.06441926956 0.06539279968 0.06637363136 x0.09872923046 0.06732121855 x0.09970674664 0.06835639477 0.06933956593 0.0702726841 0.07129982114 0.07224100083 0.07324873656 x0.1055718511 0.0741514042 x0.1065493673 0.07450670004 0.07450983673 0.07451006025 0.0745421797 0.07581675053 0.07778895646 0.07970983535 0.08167874813 x0.1143695042 0.08361554146 x0.1153470203 0.08565637469 0.08757147938 0.08942507207 0.09083637595 0.0918347463 0.09275974333 x0.1212121248 0.09378892183 x0.122189641 0.09411171824 0.09411762655 0.09411773086 0.09413322806 0.09475634992 0.09568395466 0.0966854468 0.09767009318 0.09866925329 0.09959877282 0.1005715132 0.1015666798 x0.13391985 0.1031838283 x0.1348973662 0.1051084027 0.1070813015 0.1090810373 0.1103599891 0.1113464832 0.1122662202 0.1133246943 0.1148806214 0.1168144494 0.1187281832 0.1206970513 0.1220410839 0.1231498942 0.1240678653 x0.1485826075 0.1250546724 x0.1495601237 0.125483036 0.1254902035 0.125490427 0.1255106926 0.1265336126 0.128425464 0.1304667145 0.1324072033 0.1338436007 0.1348775774 0.1357625425 0.136822924 0.1381312013 0.140263617 0.1421025991 0.1441640854 x0.1652003974 0.145535171 x0.1661779135 0.1465570927 0.1474868357 0.1485832334 0.1498908252 0.1520442218 0.1538896561 0.1558403671 0.1573531777 0.1582314968 0.1593272686 0.1602736413 0.161696136 0.163690418 0.1657820642 x0.1798631549 0.167440936 x0.1808406711 0.16951105 0.1714255959 0.1734288782 0.1752968729 0.1768839508 0.177888453 0.1789126247 0.179865554 0.1811421365 0.1832342893 0.1850597113 0.1870975643 0.1891278327 0.1911877245 0.1929515451 0.1948876977 x0.1964809448 0.196967259 x0.1974584609 0.198877275 0.2008663416 0.2027547956 0.2046798021 0.20659554 0.2087652683 0.2105645388 0.2121364474 0.2131618559 0.2141402811 0.2150708884 0.2164531201 0.2183618844 0.2202701122 x0.2111437023 0.2221509218 x0.2121212184 0.2242922634 0.2260602862 0.2282543778 0.2300341278 0.2319746912 0.2340966761 0.2359107435 0.2379624695 0.2399430871 0.2418403774 0.243849203 0.2458748072 0.2476443201 0.2496468723 0.2516286969 0.2536116242 x0.2277614921 0.2555118501 x0.2287390083 0.257551074 0.2593083978 0.2615085542 0.2632035017 0.2651857734 0.2672551274 0.269254148 0.2711015642 0.2731224895 0.2751459777 0.2770631015 0.278899014 0.2808598578 0.2828455269 x0.2424242496 0.2848649025 x0.2434017658 0.2868292332 0.2887996733 0.2907008827 0.2926802933 0.2940789461 0.2941173315 0.2941178679 0.294121176 0.2947424352 0.2966351807 0.2984601259 0.3004011512 0.3024179637 0.3043321371 0.3062534928 0.3082985282 0.3101685643 0.3122468293 0.3140058815 0.3161155581 0.3180218935 0.3199432492 0.3220301867 0.3238606751 x0.2668621838 0.3259560168 x0.2678397 0.3278149962 0.3297947943 0.3318047523 0.3337485194 0.3356031775 0.3374347985 0.3396663964 0.3418017924 0.3444441855 0.347532779 0.350368768 0.3533043563 0.3550829887 0.3572525978 0.3591547012 0.3611139953 0.3630879223 0.365026325 0.3669986427 0.3687348962 0.3708421588 0.372829169 0.3748955727 0.3767895997 0.3785247207 0.3806270659 0.382597059 0.3846144378 0.3864339888 0.3884204328 x0.297165215 0.3903434873 x0.2981427312 0.3926205337 0.3952746093 0.3981706798 0.4014418125 0.4039967656 0.4059716463 0.408051908 0.4099112749 0.4119998217 0.4139791727 0.415751785 0.417806685 0.4197388887 0.4216258228 0.4236547351 0.4256797135 0.42764768 0.4294918776 0.4315009415 0.4333090484 0.435593456 0.4383471608 0.4411467314 0.4443604052 0.4471627176 0.4489939213 0.4509780705 0.4530567229 0.4549771249 0.4570474029 0.4589518905 0.4608383477 x0.3294232786 0.4627710879 x0.3304007947 0.4646534026 0.4666630924 0.4686004519 0.470651269 0.4725413322 0.4745669663 0.4764369726 0.478443414 0.4812615216 0.4843560457 0.4872098863 0.4899234176 0.4921931326 0.4940482378 0.4960591495 0.497915864 0.4999091923 0.5018634796 0.5039109588 0.5061038136 0.5103896856 0.5155723095 0.5201823115 0.5250992775 0.5272778869 0.5293152332 0.531218946 0.5332171917 0.5352795124 0.5370491147 x0.3597263098 0.5390898585 x0.360703826 0.5410044193 0.5430243015 0.5449448824 0.5469003916 0.5488736629 0.550701201 0.5528821349 0.5546749234 0.5567472577 0.5594908595 0.5622563362 0.5652937889 0.5684120655 0.5704454184 0.5723594427 0.5742149353 0.575989902 0.5764678121 0.5764706135 0.5764709711 0.5765334368 0.5781499147 0.5801156163 0.5821563005 0.5840312839 0.5858687758 0.5878991485 0.5899272561 0.5918158889 0.5938224196 0.5957315564 0.5974575877 x0.3919843733 0.5996873975 x0.3929618895 0.602522254 0.6056080461 0.6083363891 0.6111161113 0.6134184599 0.6153268218 0.6173338294 0.6191121936 0.621157527 0.6231940389 0.6251213551 0.6270979047 0.6304546595 0.634336412 0.6384345889 0.6420394182 0.6446697116 0.6465647221 0.6486232281 0.6504116058 0.6526265144 0.654302299 0.6563566923 0.658311069 0.6604112387 0.6622830629 0.6640440822 0.6661137342 0.6681437492 0.6701362133 x0.4222874045 0.6720145941 x0.4232649207 0.673948586 0.6765912175 0.6796760559 0.6824344397 0.6855005026 0.6875366569 0.689599216 0.6914024353 0.6935556531 0.6954844594 0.6973484755 0.6994971037 0.701351881 0.7032362223 0.7053581476 0.7071624994 0.7091083527 0.711032331 0.7132200003 0.7148962021 0.7170495391 0.7189160585 0.7210471034 0.7226546407 0.725004971 0.7267652154 0.7288560867 0.7306758761 0.7325720191 0.7345702648 0.7365772724 0.7383891344 x0.4545454681 0.7405387163 x0.4555229843 0.7417959571 0.7428223491 0.7437524199 0.744740665 0.7462686896 0.7482650876 0.7501541972 0.7521598339 0.7540348768 0.7560411692 0.7580495477 0.7600713372 0.761961937 0.7637379766 0.7659619451 0.7678617239 0.7698411345 0.7718887329 0.7737085819 0.7756865025 0.7775973678 0.7797335982 0.7816227674 0.7834732533 0.7848592401 0.7858803272 0.7868523598 0.7878438234 0.7894351482 0.7912595272 x0.4848484993 0.7933009863 x0.4858260155 0.7950670123 0.7970200777 0.7991949916 0.801147759 0.8029165268 0.8050993681 0.80694139 0.8087937236 0.8109561205 0.8122566938 0.8132817149 0.8141965866 0.8151895404 0.8166146874 0.8186833262 0.8205224872 0.8226665854 0.8245197535 0.8264864683 0.8283457756 0.830411613 0.8318524361 0.83286798 0.8337866068 0.8347888589 0.83613199 0.8382732272 0.8401241302 0.8421527743 0.8436381817 0.8445673585 0.8455734253 0.8465422392 0.8479864597 0.8497905731 0.8518370986 0.8537031412 0.8552875519 0.8563424349 0.8572832346 0.8583168983 0.8595561981 0.8615216613 0.8635676503 0.8655500412 0.8670768142 0.8680682778 0.8690422177 x0.5327468514 0.8700038791 x0.5337243676 0.8712942004 0.8732610345 0.8753355742 0.8772865534 0.8787438273 0.8797540069 0.8807923794 0.8817364573 0.8827729225 0.8836708069 0.8846695423 0.8856482506 0.8866246343 0.88752985 0.8886037469 0.8895224929 0.8908718228 0.8928952813 0.8947992325 0.8968203068 0.8983604908 0.8993375897 0.9003180265 0.9012972116 0.9022808075 0.9031871557 0.9043439031 0.9051616788 0.9061895013 0.9072080851 0.9081872702 0.9091160297 0.9100978374 0.9110931754 0.9120618701 0.9130650163 0.9140247107 0.9149945974 0.9159141183 0.9168997407 0.9179679155 0.9189069867 0.9198691845 0.9208812714 0.921848774 0.9228553772 0.9237174988 0.9248356223 0.9257192612 0.9267292619 0.9277012944 0.9285120368 0.9296939969 0.9306354523 0.9316428304 0.9326353073 0.933585465 0.9345719814 0.9355803728 0.9364649057 0.9374705553 0.938467145 x0.59433043 0.9394069314 x0.5953079462 0.9404114485 0.9411202669 0.9411756396 0.9411767125 0.9411792159 0.9414640665 0.9423377514 0.9433269501 0.944391191 0.9452456236 0.9462773204 0.9472039342 0.9482783079 0.9489799738 0.9490200877 0.9490197897 0.9490193129 0.9490197897 0.9490196705 0.9490194917 0.9490209222 0.9491699934 0.9501624107 0.9511186481 0.9521170259 0.9530630708 0.9540431499 0.9550563693 0.9558688402 0.9567995071 0.9568619728 0.9568626285 0.9568642378 0.9570414424 0.9579389095 0.958948791 0.9598901868 0.9607256055 0.9607839584 0.9607849717 0.9607851505 0.9609293342 0.9617545605 0.9628711939 0.9638615847 0.9646508098 0.9647058249 0.9647057056 0.9647074342 0.9649085402 0.9656652808 0.9668176174 0.9676926136 0.9685742259 0.968627274 0.9686275721 0.9686275125 0.9686277509 0.9686271548 0.9686274529 0.968627274 0.9686275721 0.9686276317 0.9686275721 x0.657869041 0.9686277509 x0.6588465571 0.9687238932 0.9696395397 0.970631659 0.9715376496 0.9724524617 0.972548008 0.9725490212 0.9725497961 0.9726382494 0.9734616876 0.9745519757 0.9755084515 0.9763679504 0.9764695168 0.9764705896 0.9764711261 0.9764708281 0.9764705896 0.9764705896 0.9764714241 0.9765893221 0.9774141312 0.9784271717 0.9793718457 0.9802868366 0.9803910255 0.9803922772 0.9803925157 0.9803920984 0.9803925753 0.9803920984 0.9803922772 0.9804734588 0.981295526 0.9822596312 0.9832100272 0.9842139482 0.9843129516 0.984313786 0.9843134284 0.9843134284 0.9843142033 0.9843138456 0.9843139052 0.9843132496 0.9843140244 0.9843140244 0.9843136072 0.984313488 0.9843136668 0.9843140244 0.9843138456 0.9843590856 0.9851604104 0.9861618876 0.9871125817 0.9880769253 0.9882346988 0.9882351756 0.9882347584 0.988235414 0.9882352948 x0.7194526196 0.9882356524 x0.7204301357 0.9882352352 0.988235414 0.9882353544 0.988235414 0.9882352948 0.9882353544 0.9882352352 0.9882352948 0.9882356524 0.988291204 0.9890982509 0.9897877574 0.9910131693 0.9917938709 0.9921554327 0.9921569228 0.9921568036 0.9921572208 0.9921565652 0.9921568632 0.9921571016 0.9921571016 0.9921566844 0.9921569228 0.99215734 0.9921565652 0.99215734 0.9921569228 0.9921571016 0.9921571612 0.9921571016 0.9921572208 0.9921568036 0.9921571612 0.9921568632 0.9921569824 0.9921571016 0.9921900034 0.9929091334 0.9938715696 0.9947529435 0.9957149625 0.9960772395 0.9960788488 0.9960784316 0.9960782528 0.996078372 0.9960782528 0.996078372 0.9960785508 0.9960784316 0.99607867 0.9960785508 0.9960785508 0.9960786104 0.9960787296 0.9960781336 0.996078372 0.9960785508 0.9960786104 0.9960785508 0.9960787892 0.9960784316 0.9960784316 x0.7829912305 0.9960784316 x0.7839687467 0.9960783124 0.9960783124 0.9960790277 0.9960784912 0.9960783124 0.996078372 0.9960782528 0.9960786104 0.9960912466 0.9967964292 0.9976143837 0.9987137914 0.9995845556 0.9999933243 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.8445748091 1 x0.8455523252 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.90811342 1 x0.9090909362 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.9696969986 1 x0.9706745148 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1}
   blue {curve 0.01176469773 x0.0009775171056 0.01176471356 x0.001955034211 0.01176470611 0.01176523045 0.01185476221 0.01272836328 0.01371408626 0.01469006389 0.01556810923 0.01568537392 0.01568625495 0.01568674669 0.01575606316 0.01662784629 0.01761632971 0.01855535619 0.0194838196 0.01960693114 x0.0175953079 0.01960784011 x0.01857282594 0.01960783452 x0.01955034211 0.01960784569 0.01960786991 x0.02150537632 0.01960783452 0.01960827038 x0.02346041054 0.01966633834 0.020497391 x0.02541544475 0.02147135884 0.02247756347 x0.02737047896 0.02340433002 0.02352860011 x0.02932551317 0.02352940664 0.02352997288 0.0236119777 0.02438878454 0.02537812106 x0.03421309963 0.02636873908 x0.0351906158 0.02729672007 0.0274498947 x0.03714565188 0.02745098062 x0.03812316805 0.02745094895 0.02745101042 0.02745097689 0.02745098621 x0.04203323647 0.02745129727 x0.04301075265 0.0275039915 0.02831256762 x0.04496578872 0.02927253768 x0.0459433049 0.03031462803 0.03122762963 0.03221400455 0.03319329023 x0.04985337332 0.03412828967 x0.05083088949 0.03509172797 0.03529216722 x0.05278592557 0.03529414162 x0.05376344174 0.03529432043 0.03533399105 0.03611121699 0.03707427159 x0.05767351016 0.03807509318 x0.05865102634 0.03898271918 0.03921378031 x0.06060606241 0.03921567649 x0.06158357859 0.03921586648 0.03925702348 0.0400454253 0.04097924009 0.04194526747 0.04296722263 x0.06744868308 0.04391250014 0.0449128598 0.04584277049 0.04682559147 0.0470568873 0.04705883935 0.04705904052 x0.07429130375 0.04708066955 x0.07526881993 0.04782179371 0.04875895754 0.04978037253 0.0507420823 0.05178394914 0.05270736292 0.05369531736 0.05464008078 x0.08308895677 0.05563838407 x0.08406647295 0.05660244077 0.05757920444 0.05853746086 0.05882095173 0.05882353336 0.05882366747 x0.08993157744 0.0588513799 x0.09090909362 0.05952310935 0.06056645885 0.06147739664 0.06248687953 0.06342594326 0.06441926211 0.06539279968 0.06637366861 x0.09872923046 0.0673212111 x0.09970674664 0.06835640222 0.06933957338 0.07027263939 0.07129985094 0.07224098593 0.07324875891 x0.1055718511 0.07415142655 x0.1065493673 0.07450667769 0.07450981438 0.0745100379 0.07454220206 0.07581673563 0.07778899372 0.0797098577 0.08167874813 x0.1143695042 0.08361555636 x0.1153470203 0.08565638959 0.08757147938 0.08942506462 0.09083642066 0.0918347761 0.09275973588 x0.1212121248 0.09378892183 x0.122189641 0.09411171079 0.0941176489 0.09411773831 0.09413322061 0.09475637972 0.09568395466 0.0966854617 0.09767007828 0.09866926074 0.09959878772 0.1005714983 0.1015666649 x0.13391985 0.1031838655 x0.1348973662 0.1051083952 0.1070812717 0.109081082 0.1103599593 0.1113465205 0.1122662053 0.1133247092 0.1148806065 0.1168143749 0.1187281162 0.1206861734 0.1215545535 0.1215685681 0.1215685904 x0.1485826075 0.1215753332 x0.1495601237 0.1221412048 0.1230753288 0.1240673289 0.1250823587 0.126524806 0.1284254342 0.1304667294 0.1324072182 0.1338436604 0.1348775774 0.1357626021 0.136822924 0.1381312162 0.1402636766 0.1421025395 0.1441640854 x0.1652003974 0.1455352008 x0.1661779135 0.1465571523 0.1474868506 0.1485832334 0.1498907954 0.152044192 0.1538896859 0.1558404267 0.1573531926 0.1582314819 0.1593272835 0.1602736413 0.1616960317 0.1636904627 0.165782094 x0.1798631549 0.1674409807 x0.1808406711 0.16951105 0.1714257002 0.1734288186 0.1752968729 0.1768839359 0.1778884232 0.1789126843 0.1798655391 0.1811421663 0.1832343042 0.1850596517 0.1870975643 0.1891278327 0.19118765 0.1929515302 0.1948878169 x0.1964809448 0.1969672143 x0.1974584609 0.1988772899 0.2008663118 0.2027548552 0.2046798021 0.2065955251 0.2087651193 0.2105644643 0.212136358 0.2131618112 0.2141402364 0.2150708884 0.2164531052 0.2183619738 0.2202700526 x0.2111437023 0.2221509218 x0.2121212184 0.2242922783 0.2260603607 0.2282544523 0.2300341576 0.231974721 0.2340966016 0.2359108031 0.2379624248 0.2399430275 0.2418402731 0.243849203 0.2458748519 0.2476442754 0.249646917 0.2516286969 0.2536117136 x0.2277614921 0.2555118799 x0.2287390083 0.2575509846 0.2593084872 0.2615085542 0.2632034421 0.2651857436 0.2672551572 0.2692542672 0.2711015344 0.2731224597 0.2751459777 0.2770631909 0.2788990736 0.2808598578 0.2828456163 x0.2424242496 0.2848650217 x0.2434017658 0.286829412 0.2887997329 0.2907007933 0.2926803231 0.2940788865 0.2941172123 0.2941178977 0.2941212058 0.2947423458 0.2966351807 0.2984600961 0.300401181 0.3024178743 0.3043321073 0.3062535822 0.3082984686 0.3101685047 0.3122468889 0.3140058517 0.3161155581 0.3180219233 0.319943279 0.3220302165 0.3238607347 x0.2668621838 0.3259558976 x0.2678397 0.3278151155 0.3297947347 0.3318047225 0.3337483704 0.3356032073 0.3374347985 0.3396665752 0.3418019116 0.3444443345 0.3475328386 0.3503687978 0.3533043861 0.3550829887 0.3572524488 0.3591549695 0.3611140251 0.3630879521 0.3650262952 0.3669986725 0.3687348962 0.3708420396 0.3728291392 0.3748955429 0.3767895997 0.3785246313 0.3806270957 0.3825969994 0.3846143782 0.386433959 0.388420254 x0.297165215 0.3903435767 x0.2981427312 0.3926208019 0.3952744901 0.3981705606 0.4014419019 0.4039966464 0.4059715867 0.4080519676 0.4099113345 0.4119997621 0.4139792025 0.4157515466 0.4178067148 0.4197388291 0.4216256738 0.4236548841 0.4256795943 0.4276478291 0.4294917881 0.4315010905 0.4333088696 0.4355935156 0.4383472204 0.4411467314 0.4443603456 0.4471625984 0.4489940107 0.4509781599 0.4530565739 0.4549771547 0.4570474923 0.4589517117 0.4608383775 x0.3294232786 0.4627710879 x0.3304007947 0.4646534622 0.466663152 0.4686003327 0.4706511199 0.4725413918 0.4745671749 0.476437062 0.4784432054 0.4812614024 0.4843559861 0.4872108102 0.4901146889 0.4941924512 0.4979005158 0.5019196272 0.5053728819 0.5058791637 0.5058826208 0.5058858991 0.5063399076 0.5103925467 0.5155721903 0.5201823115 0.5250992775 0.5272777677 0.5293152332 0.5312190652 0.5332171321 0.5352795124 0.5370489955 x0.3597263098 0.5390899181 x0.360703826 0.5410041213 0.5430244803 0.5449448824 0.5469000936 0.5488736629 0.5507010818 0.5528821945 0.5546749234 0.5567471981 0.5594906807 0.5622564554 0.5652938485 0.5684121847 0.5704452991 0.5723593831 0.5742149353 0.5759899616 0.5764677525 0.5764706135 0.5764709711 0.5765334368 0.5781497955 0.5801154971 0.5821561813 0.5840313435 0.5858684182 0.5878992081 0.5899273157 0.5918161869 0.5938224792 0.5957315564 0.5974574089 x0.3919843733 0.5996874571 x0.3929618895 0.6025223136 0.6056078672 0.6083362699 0.6111161709 0.6134182811 0.6153268218 0.6173337698 0.6191124916 0.6211576462 0.6231941581 0.6251213551 0.6270979047 0.6304548979 0.6343362331 0.6384347081 0.6420391798 0.6446697116 0.6465647221 0.6486231685 0.6504115462 0.6526266336 0.6543023586 0.6563566327 0.6583114266 0.6604113579 0.6622831821 0.6640440226 0.6661139131 0.6681438088 0.6701359749 x0.4222874045 0.6720144153 x0.4232649207 0.6739486456 0.6765913963 0.6796762943 0.6824343204 0.6855005026 0.6875367761 0.6895992756 0.6914027333 0.6935553551 0.695484221 0.697348237 0.6994971037 0.7013520002 0.7032361627 0.70535779 0.7071624398 0.7091081142 0.711032629 0.7132201791 0.7148961425 0.7170494199 0.7189157009 0.7210472226 0.7226546407 0.7250050902 0.7267651558 0.7288559675 0.7306758165 0.7325719595 0.7345702648 0.7365774512 0.7383891344 x0.4545454681 0.7405385971 x0.4555229843 0.7417960763 0.7428222895 0.7437524199 0.744740665 0.7462683916 0.748265028 0.7501541376 0.7521598339 0.7540348172 0.75604105 0.7580493689 0.7600712776 0.7619616389 0.7637379766 0.7659619451 0.7678620219 0.7698411942 0.7718887925 0.7737087011 0.7756869197 0.7775973082 0.779733777 0.7816228271 0.7834730744 0.7848591208 0.7858806252 0.7868523598 0.787843883 0.7894350886 0.7912594676 x0.4848484993 0.7933009267 x0.4858260155 0.7950668335 0.7970203161 0.7991949916 0.801147759 0.8029165864 0.8050999641 0.806941092 0.8087934852 0.8109558821 0.8122568727 0.8132818937 0.8141966462 0.8151896596 0.8166143894 0.8186828494 0.8205225468 0.8226667643 0.8245198727 0.8264867067 0.8283458948 0.830411911 0.8318526745 0.83286798 0.8337866068 0.8347885609 0.8361321688 0.838273406 0.840124011 0.8421526551 0.8436380625 0.8445672989 0.8455733061 0.8465423584 0.8479868174 0.8497905135 0.8518372774 0.8537033796 0.8552874327 0.8563426137 0.8572831154 0.8583170176 0.8595561385 0.8615216017 0.8635676503 0.865549922 0.867076695 0.868068099 0.8690422177 x0.5327468514 0.8700037599 x0.5337243676 0.8712941408 0.8732609749 0.8753358722 0.8772867918 0.8787438273 0.8797543645 0.8807923198 0.881736815 0.8827725053 0.8836707473 0.8846693039 0.8856483698 0.8866243958 0.8875296712 0.8886038661 0.8895223737 0.8908717632 0.8928953409 0.8947993517 0.8968203068 0.8983604908 0.8993374705 0.9003181458 0.9012973309 0.9022806883 0.9031870961 0.9043439627 0.9051619768 0.9061892033 0.9072078466 0.9081872702 0.9091158509 0.9100974798 0.9110929966 0.9120617509 0.9130650163 0.9140244126 0.9149944782 0.9159140587 0.9168997407 0.9179674983 0.9189072251 0.9198692441 0.9208812118 0.9218486547 0.922855258 0.9237176776 0.9248353839 0.9257192016 0.9267293811 0.9277014732 0.9285122156 0.9296941757 0.9306353927 0.9316428304 0.9326353669 0.9335851669 0.934572041 0.9355805516 0.9364646077 0.9374707937 0.9384670854 x0.59433043 0.9394070506 x0.5953079462 0.9404115081 0.9411203861 0.94117558 0.9411766529 0.9411792159 0.9414641261 0.9423375726 0.9433270097 0.9443912506 0.9452456236 0.946277082 0.947203815 0.9482784867 0.9489801526 0.9490199685 0.9490197301 0.949021399 0.9493246078 0.9500836134 0.9512091279 0.952062726 0.9529157877 0.9529411793 0.9529408813 0.952942729 0.9531189799 0.9540431499 0.9550560713 0.9558685422 0.9567995667 0.9568619728 0.9568627477 0.9568642974 0.957041204 0.9579389691 0.9589486718 0.959890306 0.9607256651 0.9607842565 0.9607847929 0.9607854486 0.9609293342 0.9617545009 0.9628711939 0.9638617635 0.9646508098 0.9647057652 0.9647060037 0.9647071958 0.9649085402 0.9656652808 0.9668175578 0.9676927328 0.9685742855 0.9686272144 0.968627274 0.9686276317 0.9686276317 0.9686273932 0.9686273336 0.9686278105 0.9686273932 0.9686273336 0.9686275125 x0.657869041 0.9686278701 x0.6588465571 0.9687239528 0.9696395993 0.9706318974 0.9715374708 0.9724524617 0.9725481272 0.9725490808 0.9725495577 0.9726383686 0.9734614491 0.9745517373 0.9755087495 0.9763678908 0.9764695764 0.9764705896 0.9764709473 0.9764710665 0.9764706492 0.9764703512 0.9764715433 0.9765894413 0.977414012 0.9784269333 0.9793717861 0.9802871943 0.980391264 0.9803922176 0.9803925753 0.98039186 0.9803926349 0.9803919196 0.9803927541 0.980473578 0.9812954068 0.9822594523 0.9832097888 0.984213829 0.9843130112 0.9843137264 0.9843136072 0.9843136072 0.9843140841 0.9843139648 0.984313786 0.9843137264 0.9843136668 0.9843138456 0.9843137264 0.9843137264 0.9843137264 0.9843138456 0.9843145013 0.9843590856 0.985160172 0.9861622453 0.9871129394 0.9880765676 0.9882347584 0.9882352352 0.9882352352 0.9882355928 0.9882354736 x0.7194526196 0.9882357717 x0.7204301357 0.988235414 0.9882350564 0.9882352352 0.9882354736 0.9882356524 0.9882923961 0.9889888763 0.9900505543 0.9909985065 0.9919845462 0.9921562672 0.9921571612 0.9921571612 0.9921569824 0.9921569824 0.9921572208 0.992156744 0.9921571016 0.9921568036 0.9921569824 0.9921568632 0.9921568632 0.9921565652 0.9921571612 0.99215734 0.9921563268 0.9921572804 0.9921566248 0.9921571612 0.9921571016 0.9921571016 0.9921569824 0.9921568632 0.9921569824 0.9921569824 0.9921569228 0.9921569824 0.9921902418 0.9929093122 0.9938713908 0.9947527051 0.9957150221 0.9960771203 0.9960787892 0.9960785508 0.9960781336 0.9960786104 0.9960786104 0.9960782528 0.9960784316 0.9960784912 0.9960787296 0.9960786104 0.9960785508 0.9960789084 0.9960787296 0.996078372 0.9960785508 0.9960788488 0.9960784316 0.9960785508 0.99607867 0.996078372 0.9960785508 x0.7829912305 0.9960784316 x0.7839687467 0.9960785508 0.9960786104 0.9960788488 0.9960788488 0.996078372 0.996078372 0.9960784316 0.9960786104 0.9960910082 0.9967967868 0.9976143241 0.9987136126 0.9995846748 0.9999932051 0.9999999404 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.8445748091 1 x0.8455523252 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.90811342 1 x0.9090909362 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 x0.9696969986 1 x0.9706745148 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1}}
 name Sampler1
 xpos -1663
 ypos 730
}
Dot {
 name Dot6
 xpos -1629
 ypos 754
}
push $N227f8c30
Dot {
 name Dot17
 label Raw
 note_font_size 36
 xpos -1066
 ypos 455
}
set N8dac2530 [stack 0]
BlinkScript {
 inputs 2
 kernelSourceFile /Volumes/BOOTCAMP/work/client/hpd/code/general/hpd/general/blink/LUTApply1D.blink
 KernelDescription "1 \"LUTApply1DKernel\" iterate pixelWise b437e7bd391f8c0f88c36520648ebe13f8fa796a04ce443a77eca1e47cc2a7c1 3 \"src\" Read Random \"lut1dImage\" Read Random \"dst\" Write Point 1 \"interpolation\" Int 1 AQAAAA=="
 kernelSource "//\n// Copyright (c) 2014-2015 Haarm-Pieter Duiker <hpd1@duikerresearch.com>\n//\n\n//\n// A kernel that will apply 1d LUT to an image. The 1d LUT is represented as a linear ramp image\n//\n\n// Utility\nfloat4 mix(float4 a, float4 b, float4 f) \{\n  float4 mixed;\n  mixed.x = a.x*(1.f - f.x) + b.x*f.x;\n  mixed.y = a.y*(1.f - f.y) + b.y*f.y;\n  mixed.z = a.z*(1.f - f.z) + b.z*f.z;\n  mixed.w = a.w*(1.f - f.w) + b.w*f.w;\n  return mixed;  \n\}\n\n//\n// kernel\n//\nkernel LUTApply1DKernel : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src;\n  Image<eRead, eAccessRandom, eEdgeClamped> lut1dImage;\n  Image<eWrite> dst;\n\n  param:\n    int interpolation;\n\n  local:\n    int lutResolution;\n\n  void define() \{\n    defineParam(interpolation, \"interpolation\", 1);\n  \}\n\n  void init() \{\n    float pixels = lut1dImage.bounds.width();\n    lutResolution = int(pixels);\n  \}\n\n  void process(int2 pos) \{\n    SampleType(lut1dImage) lut1dImageSample;\n\n    // Sample the src image\n    SampleType(src) srcSample;\n    srcSample = src(pos.x, pos.y);\n\n    lut1dImageSample.x = 0.f;\n    lut1dImageSample.y = 0.f;\n    lut1dImageSample.z = 0.f;\n\n    // Use the 1D LUT to find the new value\n\n    // Nearest point\n    if( interpolation == 0 ) \{\n      int3 srcLUTPosition;\n      srcLUTPosition.x = round(clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition.y = round(clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition.z = round(clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1));\n\n      lut1dImageSample = lut1dImage(srcLUTPosition.x, 0);\n      float r = lut1dImageSample.x;\n      lut1dImageSample = lut1dImage(srcLUTPosition.y, 0);\n      float g = lut1dImageSample.y;\n      lut1dImageSample = lut1dImage(srcLUTPosition.z, 0);\n      float b = lut1dImageSample.z;\n\n      lut1dImageSample.x = r;\n      lut1dImageSample.y = g;\n      lut1dImageSample.z = b;\n    \} // nearest\n\n    // Bi-linear interpolation \n    else if( interpolation == 1 ) \{\n      int3 srcLUTPosition\[2];\n      srcLUTPosition\[0].x = floor(clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[0].y = floor(clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[0].z = floor(clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1));\n\n      srcLUTPosition\[1].x = ceil(clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[1].y = ceil(clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1));\n      srcLUTPosition\[1].z = ceil(clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1));\n\n      float4 interp;\n      interp.x = (clamp(srcSample.x, 0.0f, 1.0f) * (lutResolution-1)) - srcLUTPosition\[0].x;\n      interp.y = (clamp(srcSample.y, 0.0f, 1.0f) * (lutResolution-1)) - srcLUTPosition\[0].y;\n      interp.z = (clamp(srcSample.z, 0.0f, 1.0f) * (lutResolution-1)) - srcLUTPosition\[0].z;\n      interp.w = 1.0;\n\n      // Two samples from LUT\n      float4 lower, higher;;\n\n      // sample r, g, b for lower position\n      lut1dImageSample = lut1dImage(srcLUTPosition\[0].x, 0);\n      lower.x = lut1dImageSample.x;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[0].y, 0);\n      lower.y = lut1dImageSample.y;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[0].z, 0);\n      lower.z = lut1dImageSample.z;\n      lower.w = 1.0;\n\n      // sample r, g, b for higher position\n      lut1dImageSample = lut1dImage(srcLUTPosition\[1].x, 0);\n      higher.x = lut1dImageSample.x;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[1].y, 0);\n      higher.y = lut1dImageSample.y;\n      lut1dImageSample = lut1dImage(srcLUTPosition\[1].z, 0);\n      higher.z = lut1dImageSample.z;\n      higher.w = 1.0;\n\n      // Interpolate the samples\n      lut1dImageSample = mix(lower, higher, interp);\n    \} // bi-linear\n\n    // Write the new value to dst\n    SampleType(dst) t;\n    t.x = lut1dImageSample.x;\n    t.y = lut1dImageSample.y;\n    t.z = lut1dImageSample.z;\n\n    dst() = t;\n  \}\n\};\n"
 rebuild ""
 maxTileLines 100
 name BlinkScript11
 xpos -1100
 ypos 553
}
set N95e45f70 [stack 0]
Reformat {
 format "512 512 0 0 512 512 1 square_512"
 name Reformat3
 xpos -535
 ypos 553
}
Write {
 file /Volumes/BOOTCAMP/work/client/hpd/code/public/general/blink/scripts/LUTRecover_comparisonGradedImage.jpg
 raw true
 file_type jpeg
 _jpeg_quality 1
 _jpeg_sub_sampling 4:4:4
 checkHashOnRead false
 version 4
 name Write3
 xpos -535
 ypos 585
}
push $N8f8ba610
Reformat {
 format "1024 1024 0 0 1024 1024 1 square_1K"
 name Reformat7
 xpos -2206
 ypos 769
}
set N8e26a470 [stack 0]
Write {
 file /Volumes/BOOTCAMP/work/client/hpd/code/public/general/blink/scripts/LUTRecover_recoveredGrade.jpg
 raw true
 file_type jpeg
 _jpeg_quality 1
 _jpeg_sub_sampling 4:4:4
 checkHashOnRead false
 version 4
 name Write6
 xpos -2206
 ypos 801
}
push $N9237c690
Grade {
 white {0.583485 0.531876 1 1}
 white_panelDropped true
 multiply {1 1 1 1}
 gamma 1.2
 name Grade2
 xpos -1401
 ypos 248
}
push $N227f21a0
Dot {
 name Dot16
 label Graded
 note_font_size 36
 xpos -790
 ypos 458
}
set N227f6410 [stack 0]
push $N95e45f70
Difference {
 inputs 2
 gain 10000
 output rgba.red
 name Difference8
 xpos -824
 ypos 679
}
Shuffle {
 green red
 blue red
 name Shuffle2
 xpos -824
 ypos 711
}
push $N8dac2530
push $N8dac2530
push $N8e26a470
push $N8da17820
push $N8da031b0
push $N227f6410
push $N95e45f70
Viewer {
 inputs 7
 frame 1
 frame_range 1-100
 input_number 1
 colour_sample_bbox {0.7826961875 -0.3903420568 0.7867203355 -0.3863179088}
 samplepoints {{0.7585512996 -0.3863179088}
   }
 viewerProcess None
 name Viewer1
 selected true
 xpos -2369
 ypos 452
}
